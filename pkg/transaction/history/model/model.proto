syntax = "proto3";

import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

enum KinVersion {
    UNKNOWN  = 0;
    RESERVED = 1;
    KIN2     = 2;
    KIN3     = 3;
    KIN4     = 4;
}

// Entry is a generalized history entry that contains a blockchain
// transaction, as well as the KinVersion the transaction is for.
//
// This allows for the generalization of a history store, which allows
// for a continuous view of history across blockchains.
message Entry {
    KinVersion version = 1;

    oneof kind {
        StellarEntry stellar = 2;
        SolanaEntry solana = 3;
    }
}

message StellarEntry {
    uint64 ledger = 1;

    uint64 paging_token = 2;

    google.protobuf.Timestamp ledger_close_time = 3 [(validate.rules).timestamp = {
        required: true,
    }];

    string network_passphrase = 4 [(validate.rules).string = {
        min_len: 1
    }];

    bytes envelope_xdr = 5 [(validate.rules).bytes = {
        min_len: 1
        max_len: 10240
    }];

    bytes result_xdr = 6 [(validate.rules).bytes = {
        min_len: 1
        max_len: 10240
    }];
}

message SolanaEntry {
    uint64 slot = 1;

    bool confirmed = 2;

    // Maximum size taken from: https://github.com/solana-labs/solana/blob/39b3ac6a8d29e14faa1de73d8b46d390ad41797b/sdk/src/packet.rs#L9-L13
    bytes transaction = 3 [(validate.rules).bytes = {
        min_len: 1
        max_len: 1232
    }];

    // Optional value represented by 'TransactionError' type returned
    // from the Solana RPCs.
    bytes transaction_error = 4 [(validate.rules).bytes = {
        min_len: 0
        max_len: 1024
    }];

    // Optional estimated block time of the transaction.
    //
    // This isn't mandatory since we may not always have information
    // on the timestamp. Notably:
    //
    //   1. If the entry hasn't been confirmed yet, getBlockTime() won't work.
    //   2. If the block is older than the RPC node's timestamp history.
    //
    // In case (1), we expect that the block time will be updated once it is confirmed.
    // In case (2), it either means an ingestor has fallen extremely behind, or the RPC
    // node has had some issue losing history. In the latter case, we'd want to try and
    // repair the timestamps from another node.
    //
    // Since we do _not_ want to prevent the ingestion of transactions (by requiring block_time),
    // we make it optional.
    google.protobuf.Timestamp block_time = 5 [(validate.rules).timestamp = {
        required: false,
    }];
}
